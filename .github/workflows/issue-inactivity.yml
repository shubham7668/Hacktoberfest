# .github/workflows/issue-inactivity.yml
name: Check Issue Inactivity

on:
  schedule:
    # Runs every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allows manual trigger for testing

jobs:
  check-inactivity:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      
    steps:
      - name: Check and unassign inactive issues
        uses: actions/github-script@v7
        with:
          script: |
            const hoursLimit = 10;
            const now = new Date();
            
            // Get all open assigned issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'assigned',
              per_page: 100
            });
            
            for (const issue of issues) {
              if (!issue.assignees || issue.assignees.length === 0) continue;
              
              // Get issue timeline to check last activity
              const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                per_page: 100
              });
              
              // Find the last assignment event
              const assignmentEvents = timeline.filter(event => event.event === 'assigned');
              if (assignmentEvents.length === 0) continue;
              
              const lastAssignment = new Date(assignmentEvents[assignmentEvents.length - 1].created_at);
              
              // Check for any activity after assignment (comments, commits, etc.)
              const activityAfterAssignment = timeline.filter(event => {
                const eventTime = new Date(event.created_at);
                return eventTime > lastAssignment && 
                       (event.event === 'commented' || 
                        event.event === 'cross-referenced' ||
                        event.event === 'committed');
              });
              
              // Calculate hours since assignment
              const hoursSinceAssignment = (now - lastAssignment) / (1000 * 60 * 60);
              
              // If no activity and time exceeded, unassign
              if (activityAfterAssignment.length === 0 && hoursSinceAssignment >= hoursLimit) {
                const assignee = issue.assignees[0].login;
                
                // Comment on the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `⏰ @${assignee}, this issue has been unassigned due to inactivity for ${Math.floor(hoursSinceAssignment)} hours.\n\nThe issue is now available for other contributors. Feel free to ask for reassignment if you're still interested! 🙂`
                });
                
                // Unassign the issue
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: [assignee]
                });
                
                // Remove the assigned label
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'assigned'
                }).catch(() => {}); // Ignore if label doesn't exist
                
                console.log(`Unassigned issue #${issue.number} from @${assignee}`);
              }
            }